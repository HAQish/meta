###########################################################
## Instructions
###########################################################

I'm going to paste a problem below and your job is to use code 
to figure it out.  We’re not actually going to run any of the 
code, just step through it.  It’s best if you talk through your
 strategy for solving the problem so I can help debug you before 
you go down the wrong path.  This is meant to be collaborative.

Remember:

1. The logic of your solution is more important than the syntax, 
so please talk it through while you're solving it.  

2. Please don't use any other resources like Google but feel free 
to ask me if you can't remember something like what a particular 
method is called. Again, it's the logic that matters not whether
you've memorized a whole language yet.  You can use whatever language
you're most comfortable with, though we prefer JavaScript.

3. Don’t worry about optimizing the solution or making it pretty.  
Just get it done :)

Good luck! 




###########################################################
## Reverse                                     Max: 8 mins
###########################################################

Write a function `reverse` which takes an array as an argument 
and which returns that array with the order of items reversed.  
Do not use existing high-level functions which accomplish the 
exact same thing (e.g. a `.reverse()` method).

For example:

reverse( [ 1, 2, 3, 4, 5 ] )
#=> [5, 4, 3, 2, 1]

**** Code below here ****
function reverse(arr) {
	var arrCopy = arr.slice(0, arr.length);
	for (let i = 0; i < arr.length; i++) {
		arrCopy[i] = arr[(arr.length-1) - i];
	}
	return arrCopy;
}






###########################################################
## Light Switches                              Max: 18 mins
###########################################################

You are in a room with 100 light switches in a line along the 
wall.  They all start in the OFF position.  

When you first enter the room, you walk down the line of all 
100 switches and change each one to the ON position.  

Then you start from the beginning again, this time changing 
the position of every second switch (e.g. #2, #4, #6...).  
If it was ON, now it is OFF and if it was OFF, now it is ON.

Then you start from the beginning again and change every THIRD 
switch (e.g. #3, #6, #9…)...
...then again for every FOURTH switch (e.g. #4, #8, #12…) ...
...then again for every FIFTH switch...
...and so on until you've made 100 trips.

Write a script that identifies which switches will be in the ON 
position after this is completed.

**** Code below here ****

// ON = -1
// OFF = +1

var lights = []; // array of 1-100

function createArray(lights) {
	for (let i = 1; i < 101; i++) {
  	lights.push(i);
  }
}

function switch(number) {
	for (let i = 1; i < 101; i++) {
  	lights[i] *= -1;
    
    
  }
}








###########################################################
## Stock Picker                                Max: 12 mins
###########################################################

Write a method that takes an array of historical stock prices 
for a single stock (prices on days 0, 1, 2...), and outputs 
an array with the most profitable pair of days (indices) on 
which you should have first bought and then sold the stock.

For example:

    prices = [ 44, 30, 24, 32, 35, 30, 40, 38, 15 ]  
    # e.g., $44, $30, $24…

    stock_picker( prices ) 
    => [ 2, 6 ]     
    # ...so you would buy at $24, sell at $40 == $16 profit

**** Code below here ****

function stock_picker(prices) {
	for (let i = 0; i < prices.length; i++) {
  	var finalPrices = [];
  	var newPrices = prices.slice(i, prices.length);
    var newPricesLow = newPrices[0];
    for (let j = 1; j < newPrices.length; j++) {
    	costs.push((newPricesLow - newPrices[j]) * -1);
      
    }
    var costs = [];           										// [biggest profit, -20...]
    costs.sort((a, b) => a - b);								//	costs[0] = biggest profit
    finalPrices.push(costs[0]);
  }
}






