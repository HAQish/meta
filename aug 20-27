https://www.codewars.com/kata/valid-parentheses/train/javascript

Write a function called validParentheses that takes a string of parentheses, and determines if the order of the parentheses is valid. validParentheses should return true if the string is valid, and false if it's invalid.

Examples: 
validParentheses( "()" ) => returns true 
validParentheses( ")(()))" ) => returns false 
validParentheses( "(" ) => returns false 
validParentheses( "(())((()())())" ) => returns true 

Constraints: 
0 <= input.length <= 100 
Along with opening (() and closing ()) parenthesis, input can contain any valid ASCII characters.

Note: In the JavaScript and Go version of this Kata, input will only contain opening and closing parenthesis and will not be an empty string.

--------------------------------------------------------------------------------------------------


function validParentheses(parens){
  parensArray = parens.split("");
  for (let i = 0; i < parensArray.length; i++) {
    if (parensArray[i] === "(") {
      parensArray[i] = 1;
    } else {
    parensArray[i] = -1;
    }
  } if (parensArray.reduce((a, b) => {a + b} == 0;) {
    return true;
  } else {
  return false;
  }
}





https://www.codewars.com/kata/52b757663a95b11b3d00062d/train/javascript

Write a function toWeirdCase (weirdcase in Ruby) that accepts a string, and returns the same string with all even indexed characters in each word upper cased, and all odd indexed characters in each word lower cased. The indexing just explained is zero based, so the zero-ith index is even, therefore that character should be upper cased.

The passed in string will only consist of alphabetical characters and spaces(' '). Spaces will only be present if there are multiple words. Words will be separated by a single space(' ').

Examples:

toWeirdCase( "String" );//=> returns "StRiNg"
toWeirdCase( "Weird string case" );//=> returns "WeIrD StRiNg CaSe"

--------------------------------------------------------------------------------------------------

function toWeirdCase(string){
  var weirdCaseArray = string.split("");
  function toWeirdCaseEvens(string) { //to uppercase
    for (let i = 0; i < weirdCaseArray.length / 2; i = i + 2) {
      weirdCaseArray[i] = string[i].toUpperCase;
    }
    return weirdCaseArray;
  }
  
  function toWeirdCaseOdds(string) { //to lowercase
    for (let i = 1; i < string.length / 2; i = i + 2) {
      weirdCaseArray[i] = string[i].toLowerCase;
    }
    return weirdCaseArray;
  } 
  var newWeirdCaseString = weirdCaseArray.join("");
  return newWeirdCaseString;
}





https://www.codewars.com/kata/reverse-words/train/javascript

Write a reverseWords function that accepts a string a parameter, and reverses each word in the string. Every space should stay, so you cannot use words from Prelude.

Example:

reverseWords("This is an example!"); // returns  "sihT si na !elpmaxe"
reverseWords "An example!"    -- "nA !elpmaxe"
reverseWords "double  spaces" -- "elbuod  secaps"

--------------------------------------------------------------------------------------------------

function reverseWords(str) {
  var splitArray = str.split(" ");
  var newSplitArray = splitArray.map((el) => {el.reverse();};
  var newString = newSplitArray.join(" ");
  return newString;
}





https://www.codewars.com/kata/523f5d21c841566fde000009/train/javascript

Your goal in this kata is to implement an difference function, which subtracts one list from another.

It should remove all values from list a, which are present in list b.

array_diff([1,2],[1]) == [2]
If a value is present in b, all of its occurrences must be removed from the other:

array_diff([1,2,2,2,3],[2]) == [1,3]

--------------------------------------------------------------------------------------------------

function array_diff(a, b) { //a and b are arrays themselves
  return a.filter(function (el) {
    if (el != b[0]) {
      return true;
    } else {
      return false;
    }
  }
}





https://www.codewars.com/kata/55c6126177c9441a570000cc/train/javascript

My friend John and I are members of the "Fat to Fit Club (FFC)". John is worried because each month a list with the weights of members is published and each month he is the last on the list which means he is the heaviest.

I am the one who establishes the list so I told him: "Don't worry any more, I will modify the order of the list". It was decided to attribute a "weight" to numbers. The weight of a number will be from now on the sum of its digits.

For example 99 will have "weight" 18, 100 will have "weight" 1 so in the list 100 will come before 99. Given a string with the weights of FFC members in normal order can you give this string ordered by "weights" of these numbers?

Example:

"56 65 74 100 99 68 86 180 90" ordered by numbers weights becomes: "100 180 90 56 65 74 68 86 99"

When two numbers have the same "weight", let us class them as if they were strings and not numbers: 100 is before 180 because its "weight" (1) is less than the one of 180 (9) and 180 is before 90 since, having the same "weight" (9) it comes before as a string.

All numbers in the list are positive numbers and the list can be empty.

Notes

Don't modify the input
For C: The result is freed.

--------------------------------------------------------------------------------------------------

function orderWeight(string) { // in an array, reduce each array, and then sort
  var firstArray = string.split(" ");
  var unSortedArray = firstArray.map(el => el.split("").reduce((a, b) => {a + b});
  var sortedArray = unSortedArray.sort();
  var sortedString = sortedArray.join(" ");
  return sortedString;

}
// if this worked, it would return the order after they have been reduced, but I need the originals in the new order
