https://www.codewars.com/kata/a-chain-adding-function/train/javascript

We want to create a function that will add numbers together when called in succession.

add(1)(2);
// returns 3
We also want to be able to continue to add numbers to our chain.

add(1)(2)(3); // 6
add(1)(2)(3)(4); // 10
add(1)(2)(3)(4)(5); // 15
and so on.

A single call should return the number passed in.

add(1); // 1
We should be able to store the returned values and reuse them.

var addTwo = add(2);
addTwo; // 2
addTwo + 5; // 7
addTwo(3); // 5
addTwo(3)(5); // 10
We can assume any number being passed in will be valid whole number.

(not my answer, but the top answer)
function add(n){
  var fn = function(x) {
    return add(n + x);
  };
  
  fn.valueOf = function() {
    return n;
  };
  
  return fn;
}

-------------------------------------------------------------------------------------------------------------

https://www.codewars.com/kata/sum-strings-as-numbers/train/javascript

Given the string representations of two integers, return the string representation of the sum of those integers.

For example:

sumStrings('1','2') // => '3'
A string representation of an integer will contain no characters besides the ten numerals "0" to "9".

function sumStrings(a,b) { 
  var valA = parseInt(a);
  var valB = parseInt(b);
  var valC = valA + valB;
  return JSON.stringify(valC);
}

(the errors)
sumStrings('', '5') - Expected: '5', instead got: 'null'
sumStrings('712569312664357328695151392', '8100824045303269669937') - Expected: '712577413488402631964821329', instead got: '7.125774134884027e+26'

-----------------------------------------------------------------------------------------------------------------

https://www.codewars.com/kata/51b6249c4612257ac0000005/train/javascript

Create a function that takes a Roman numeral as its argument and returns its value as a numeric decimal integer. You don't need to validate the form of the Roman numeral.

Modern Roman numerals are written by expressing each decimal digit of the number to be encoded separately, starting with the leftmost digit and skipping any 0s. So 1990 is rendered "MCMXC" (1000 = M, 900 = CM, 90 = XC) and 2008 is rendered "MMVIII" (2000 = MM, 8 = VIII). The Roman numeral for 1666, "MDCLXVI", uses each letter in descending order.

Example:

solution('XXI'); // should return 21

function solution(roman){
  var romanArray = roman.split("");
  var convertedRomanArray = romanArray.map(function(el) {
    switch(el) {
      case "M": el = 1000;
      break;
      case "D": el = 500;
      break;
      case "C": el = 100;
      break;
      case "L": el = 50;
      break;
      case "X": el = 10;
      break;
      case "V": el = 5;
      break;
      case "I": el = 1;
      break;
    }
  };
  for (let i = 0; i < convertedRomanArray.length; i++) {
    if (convertedRomanArray[i] < convertedRomanArray[i+1]) {
      convertedRomanArray[i] = convertedRomanArray[i] * -1;
    }
  }
  var finalAnswer = convertedRomanArray.reduce((a, b) => {return a + b});
  return finalAnswer;
}

--------------------------------------------------------------------------------------------

https://www.codewars.com/kata/550f22f4d758534c1100025a/train/javascript

Once upon a time, on a way through the old wild west,…

… a man was given directions to go from one point to another. The directions were "NORTH", "SOUTH", "WEST", "EAST". Clearly "NORTH" and "SOUTH" are opposite, "WEST" and "EAST" too. Going to one direction and coming back the opposite direction is a needless effort. Since this is the wild west, with dreadfull weather and not much water, it's important to save yourself some energy, otherwise you might die of thirst!

How I crossed the desert the smart way.

The directions given to the man are, for example, the following:

["NORTH", "SOUTH", "SOUTH", "EAST", "WEST", "NORTH", "WEST"].
or

{ "NORTH", "SOUTH", "SOUTH", "EAST", "WEST", "NORTH", "WEST" };
or (haskell)

[North, South, South, East, West, North, West]
You can immediatly see that going "NORTH" and then "SOUTH" is not reasonable, better stay to the same place! So the task is to give to the man a simplified version of the plan. A better plan in this case is simply:

["WEST"]
or

{ "WEST" }
or (haskell)

[West]
or (rust)

[WEST];
Other examples:

In ["NORTH", "SOUTH", "EAST", "WEST"], the direction "NORTH" + "SOUTH" is going north and coming back right away. What a waste of time! Better to do nothing.

The path becomes ["EAST", "WEST"], now "EAST" and "WEST" annihilate each other, therefore, the final result is [] (nil in Clojure).

In ["NORTH", "EAST", "WEST", "SOUTH", "WEST", "WEST"], "NORTH" and "SOUTH" are not directly opposite but they become directly opposite after the reduction of "EAST" and "WEST" so the whole path is reducible to ["WEST", "WEST"].

Task

Write a function dirReduc which will take an array of strings and returns an array of strings with the needless directions removed (W<->E or S<->N side by side).

The Haskell version takes a list of directions with data Direction = North | East | West | South. The Clojure version returns nil when the path is reduced to nothing. The Rust version takes a slice of enum Direction {NORTH, SOUTH, EAST, WEST}.

Examples

dirReduc(["NORTH", "SOUTH", "SOUTH", "EAST", "WEST", "NORTH", "WEST"]) => ["WEST"]
dirReduc(["NORTH", "SOUTH", "SOUTH", "EAST", "WEST", "NORTH"]) => []
See more examples in "Example Tests"

Note

Not all paths can be made simpler. The path ["NORTH", "WEST", "SOUTH", "EAST"] is not reducible. "NORTH" and "WEST", "WEST" and "SOUTH", "SOUTH" and "EAST" are not directly opposite of each other and can't become such. Hence the result path is itself : ["NORTH", "WEST", "SOUTH", "EAST"].

function dirReduc(arr){
  var newArr = arr.map(function(el) {
    switch (el) {
      case "NORTH": el = 1;
      break;
      case "SOUTH": el = -1;
      break;
      case "EAST": el = 2;
      break;
      case "WEST": el = -2;
      break;
    }
  });
  console.log(newArr);
  for (let i = 0; i < newArr.length; i++) {
    if (newArr[i] + newArr[i+1] === 0) {
      newArr.splice(i, 2);
      i = 0;  // to reset the loop so it can catch a pair of newly adjacent directions
    }
  }
  var finalArray = newArr.map(function(el) {
    switch (el) {
    case 1: el = "NORTH";
    break;
    case -1: el = "SOUTH";
    break;
    case 2: el = "EAST";
    break;
    case -2: el = "WEST";
    break;
    }
  });
  return finalArray;
}

---------------------------------------------------------------------------------------------------

https://www.codewars.com/kata/5672682212c8ecf83e000050/train/javascript

Consider a sequence u where u is defined as follows:

The number u(0) = 1 is the first one in u.
For each x in u, then y = 2 * x + 1 and z = 3 * x + 1 must be in u too.
There are no other numbers in u.
Ex: u = [1, 3, 4, 7, 9, 10, 13, 15, 19, 21, 22, 27, ...]

1 gives 3 and 4, then 3 gives 7 and 10, 4 gives 9 and 13, then 7 gives 15 and 22 and so on...

#Task: Given parameter n the function dbl_linear (or dblLinear...) returns the element u(n) of the ordered (with <) sequence u.

#Example: dbl_linear(10) should return 22

#Note: Focus attention on efficiency

function dbl_linear(n) {
  var arr = [1];
  for (let i = 1; i < n + 1) {
    arr.push((2 * i) + 1);
    i = arr[arr.length - 1];
  }
  for (let i = 1; i < n + 1) {
    arr.push((3 * 1) + 1);
    i = arr[arr.length - 1];
  }
  var newArr = arr.sort((a, b) => {return a - b});
  return newArr[n];
}
