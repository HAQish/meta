https://www.codewars.com/kata/5547cc7dcad755e480000004/train/javascript

A friend of mine takes a sequence of numbers from 1 to n (where n > 0).
Within that sequence, he chooses two numbers, a and b.
He says that the product of a and b should be equal to the sum of all numbers in the sequence, excluding a and b.
Given a number n, could you tell me the numbers he excluded from the sequence?
The function takes the parameter: n (don't worry, n is always strictly greater than 0 and small enough so we shouldn't have overflow) and returns an array of the form:

[(a, b), ...] or [[a, b], ...] or {{a, b}, ...} or or [{a, b}, ...]
with all (a, b) which are the possible removed numbers in the sequence 1 to n.

[(a, b), ...] or [[a, b], ...] or {{a, b}, ...} or ...will be sorted in increasing order of the "a".

It happens that there are several possible (a, b). The function returns an empty array if no possible numbers are found which will prove that my friend has not told the truth! (Go: in this case return nil).

(See examples for each language in "RUN EXAMPLES")

#Examples:

removNb(26) should return [(15, 21), (21, 15)]

function removeNb (n) {
  var result = [];
  function addFact (n) {
    var Sum = 0;
    for (let k = n; k >= 0; k--) {
      Sum += k;
    }
     return Sum;
  }
  for (let i = 0; i <= n; i++) {
    for (let j = 0; j <= n; j++) {
      var currentSum = addFact(n) - (i + j);
      if (i * j === currentSum) {
        result.push([i, j]);
      }
    }
  }
  return result;
}


Passed: 9 Failed: 0 Errors: 1
Test Results:
 Your wonderful implementation...
 should work for some basic numbers (7 of 7 Assertions)
 should work when the friend is cheating (2 of 2 Assertions)
STDERR:
Process was terminated. It took longer than 12000ms to complete
Why did my code time out?
Our servers are configured to only allow a certain amount of time for your code to execute. In rare cases the server may be taking on too much work and simply wasn't able to run your code efficiently enough. Most of the time though this issue is caused by inefficient algorithms. If you see this error multiple times you should try to optimize your code further.
Signal:
Process exited prematurely with a SIGKILL signal.

-----------------------------------------------------------------------------------------------------------------------

https://www.codewars.com/kata/52f78966747862fc9a0009ae/train/javascript

Your job is to create a calculator which evaluates expressions in Reverse Polish notation.

For example expression 5 1 2 + 4 * + 3 - (which is equivalent to 5 + ((1 + 2) * 4) - 3 in normal notation) should evaluate to 14.

Note that for simplicity you may assume that there are always spaces between numbers and operations, e.g. 1 3 + expression is valid, but 1 3+ isn't.

Empty expression should evaluate to 0.

Valid operations are +, -, *, /.

You may assume that there won't be exceptional situations (like stack underflow or division by zero).

function calc(expr) { // every step loses two slots
  var arr = expr.split(" ").join("").split("");
  for (let i = 0; i < arr.length; i++) {
    if (parseInt(arr[i]) == NaN) {
      arr[i] = eval(arr[i-2] arr[i] arr[i-1]);
      arr.splice(i-2, 2);
      i = 0;
      }
    }
  }
  return arr[0];
}

------------------------------------------------------------------------------------------

https://www.codewars.com/kata/514a024011ea4fb54200004b/solutions/javascript/me/best_practice

Write a function that when given a URL as a string, parses out just the domain name and returns it as a string. For example:

domainName("http://github.com/carbonfive/raygun") == "github" 
domainName("http://www.zombie-bites.com") == "zombie-bites"
domainName("https://www.cnet.com") == "cnet"

(my solution worked, but it seemed very bulky)

function domainName(url){
  var changingURL = url;
  for (let i = 0; i < url.length; i++) {
    if (changingURL.slice(0, 7) === "http://") {
      changingURL = changingURL.slice(7, changingURL.length);
    } else if (changingURL.slice(0, 8) === "https://") { 
      changingURL = changingURL.slice(8, changingURL.length);
    } else if (changingURL.slice(0, 4) === "www.") {
      changingURL = changingURL.slice(4, changingURL.length);
    } else {
      for (let j = 0; j < changingURL.length; j++) {
        if (changingURL[j] === ".") {
          return changingURL.slice(0, j);
        }
      }
    }
  }

}

------------------------------------------------------------------------------------------------------------

https://www.codewars.com/kata/5269452810342858ec000951/train/javascript

You need to create a function that will validate if given parameters are valid geographical coordinates.

Valid coordinates look like the following: "23.32353342, -32.543534534". The return value should be either true or false.

Latitude (which is first float) can be between 0 and 90, positive or negative. Longitude (which is second float) can be between 0 and 180, positive or negative.

Coordinates can only contain digits, or one of the following symbols (including space after comma) -, .

There should be no space between the minus "-" sign and the digit after it.

Here are some valid coordinates:

-23, 25
24.53525235, 23.45235
04, -23.234235
43.91343345, 143
4, -3
And some invalid ones:

23.234, - 23.4234
2342.43536, 34.324236
N23.43345, E32.6457
99.234, 12.324
6.325624, 43.34345.345
0, 1,2
0.342q0832, 1.2324

// was originally isValidCoordiantes(coordinates)

function isValidCoordinates(x, y){
  if (parseInt(x) || parseInt(y) == NaN) {
    return false;
  } else if (parseInt(x) <= -90 || parseInt(x) >= 90) {
    return false;
  } else if (parseInt(y) <= -180 || parseInt(y) >= 180) {
    return false;
  } else {
    return true;
  }
}

Time: 315ms Passed: 5 Failed: 8
Test Results:
-23, 25 validation failed.
4, -3 validation failed.
24.53525235, 23.45235 validation failed.
04, -23.234235 validation failed.
43.91343345, 143 validation failed.
^^ valid coordinates

Test Passed  "23.234, - 23.4234",
Test Passed  "2342.43536, 34.324236"
N23.43345, E32.6457 validation failed.
Test Passed  "99.234, 12.324",
Test Passed  "6.325624, 43.34345.345"
0, 1,2 validation failed.
0.342q0832, 1.2324 validation failed.
Test Passed  "23.245, 1e1"

^^ invalid coordinates
